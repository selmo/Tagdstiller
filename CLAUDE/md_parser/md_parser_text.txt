📄 CLAUDE.md - DocExtract 시스템

프로젝트 개요 ✅ 완성됨 (2025.08.29)
이 프로젝트는 문서를 프로젝트 단위로 업로드하고 키워드를 추출하여 관리하는 완전한 풀스택 시스템입니다. 

핵심 기능 (최종 업데이트 2025.08.30)
🚀 완전 파싱 시스템: 모든 파서를 동시 사용하여 최상의 결과 보장
📊 단계적 문서 처리: 파싱→키워드추출→구조분석→KG생성 자동 연계
🔥 Memgraph Knowledge Graph: 도메인별 지식 그래프 자동 생성 및 그래프 DB 저장 NEW!
🎯 도메인 특화 KG: 기술/학술/비즈니스/법률 문서별 최적화된 엔티티/관계 NEW!
🔗 구체적 관계 추론: RELATEDTO → IMPLEMENTS/CITES/COMPETESWITH 등 NEW!
🏗️ 문서 구조 분석: 헤더, 테이블, 이미지 등 구조 요소 완전 분석
💾 완전한 파일 저장 시스템: 파서별 개별 결과 + 종합 결과 모두 저장
다중 파일 형식 지원: PDF, DOCX, HTML, Markdown, TXT, ZIP 자동 추출
다중 키워드 추출기: KeyBERT, spaCy NER, LLM(Ollama), KoNLPy
🎯 Dublin Core 메타데이터 시스템: 국제 표준 메타데이터 스키마 완전 준수
🔍 Docling 파서: 고급 PDF 구조 추출 (테이블, 섹션, 이미지)
📊 로컬 분석 API: 프로젝트 없이 직접 파일 분석 가능
🐛 고급 디버그 로깅 시스템: 모든 추출 과정의 중간 결과물을 상세 기록 및 분석
실시간 LLM 연동: Ollama 서버와 완전 통합, 동적 모델 로딩
spaCy 모델 자동 관리: 모델 자동 다운로드, 설치 상태 확인, 테스트 기능
고급 키워드 관리: 키워드 중심/문서 중심 뷰, 추출기별 필터링
설정 관리 UI: 탭 기반 추출기별 설정 관리, 드롭다운 모델 선택
프로젝트 관리: 생성, 수정, 삭제, 파일 업로드/삭제
지능형 파싱 관리: 업로드 시 파싱 비활성화, 키워드 추출 시 자동 파싱
추출기별 키워드 관리: 재분석 시 기존 키워드 자동 삭제 후 재추출
실시간 상태 표시: 파싱 상태, 연결 테스트, 오류 메시지
정확한 진행률 추적: 파일 수 × 추출기 수 기반 상세 진행 표시
실제 KeyBERT 모델 로딩: 14개의 다양한 sentence-transformer 모델 지원
KeyBERT 모델 다운로드 관리: 자동 다운로드, 진행률 표시, 캐시 관리
상세한 추출 로깅: 모든 추출 단계와 결과를 서버 로그에 기록
고급 PDF 뷰어: PDF.js 기반 뷰어로 키워드 하이라이팅 및 페이지 네비게이션
리사이징 가능한 UI: 사이드바 및 키워드 패널 크기 조절 기능
전체 키워드 통계: 모든 프로젝트의 키워드 통합 분석

기술 스택
백엔드
Python 3.11+ with Conda Environment
FastAPI (완전한 RESTful API)
SQLite with SQLAlchemy ORM (관계형 데이터)
Memgraph (그래프 데이터베이스) - Knowledge Graph 저장 NEW!
PyMuPDF, python-docx, BeautifulSoup4, Docling (문서 파싱)
KeyBERT, spaCy, sentence-transformers (AI 키워드 추출)
LangChain, Ollama (LLM 통합)
KoNLPy (한국어 자연언어처리)

프론트엔드 
React 18 with TypeScript
Tailwind CSS
Axios (API 통신)

배포 및 실행
Conda 환경 기반 백엔드 (포트 8000)
React 개발 서버 (포트 3001)
Memgraph 그래프 DB (포트 7687) - Docker 권장 NEW!
Memgraph Studio (포트 3000) - 그래프 시각화 NEW!
Ollama LLM 서버 (포트 11434)
자동화된 스크립트 (scripts/ 디렉토리)

시스템 아키텍처 (완성됨)

API 엔드포인트
프로젝트 관리
- 프로젝트 목록 조회
- 프로젝트 생성
- 프로젝트 이름 수정
- 프로젝트 삭제
- 프로젝트 파일 목록
- 단일 파일 업로드
- 다중 파일 업로드
- 키워드 추출

로컬 파일 완전 파싱 (2025.08.31 업데이트)
- 모든 파서를 사용한 완전 파싱 (directory 파라미터 지원)
- 완전 파싱 (GET 방식, directory 파라미터 지원)
- 파싱 상태 확인
- 파싱 결과 조회

고급 문서 분석 (2025.08.31 업데이트)
- 문서 구조 분석 (directory, usellm 파라미터 지원)
- 구조 분석 (GET 방식)
- Knowledge Graph 생성 (directory, usellm 파라미터 지원)
- KG 조회 (GET 방식)
- 메타데이터 추출 (directory, usellm 파라미터 지원)
- 메타데이터 추출 (POST 방식)

키워드 관리
- 프로젝트 키워드 조회
- 파일별 키워드 조회

추출기 관리
- 사용 가능한 추출기 목록
- Ollama 모델 목록
- LLM 연결 테스트

설정 관리
- 전체 설정 목록
- 단일 설정 조회
- 설정 값 수정
- KeyBERT 모델 목록 조회
- KeyBERT 모델 다운로드
- 다운로드 진행률 스트리밍
- 모델 캐시 삭제
- 모델 캐시 상태 확인

Memgraph Knowledge Graph API (신규)
- Memgraph 연결 상태 확인
- 데이터베이스 통계 정보
- KG 데이터 삽입
- 특정 문서 KG 조회
- 엔티티 검색 (타입, 이름, 도메인 필터)
- 사용자 정의 Cypher 쿼리 실행
- KG 데이터 내보내기 (JSON/Cypher)
- 그래프 시각화 데이터
- 엔티티 타입 목록
- 관계 타입 목록
- 데이터베이스 전체 삭제 (관리자 권한)

프론트엔드 컴포넌트
- 메인 애플리케이션 (리사이저 기능 포함, 완성됨)
- 프로젝트 생성/관리 (완성됨)
- 파일 업로드 (완성됨)
- 키워드 추출 실행 (완성됨)
- 추출 결과 표시 (완성됨)
- 시스템 설정 관리 (탭 기반 UI, 완성됨)
- 키워드 관리 UI (리사이징 가능한 패널, 완성됨)
- PDF 문서 뷰어 (키워드 하이라이팅 기능, 완성됨)
- 전체 키워드 통계 및 관리 (완성됨)
- 문서 뷰어 (다중 형식 지원, 완성됨)

데이터베이스 스키마 (완성됨)
Project: 프로젝트 관리 (id, name, createdat)
File: 파일 관리 (id, projectid, filename, filepath, size, content, parsestatus, parseerror)
KeywordOccurrence: 키워드 추출 결과 (id, fileid, keyword, extractorname, score, category, position, context)
Config: 시스템 설정 (key, value, description, updatedat)

디렉토리 구조
main.py: 엔트리 포인트
db/: 데이터베이스 설정 및 모델 정의
routers/, services/: 라우팅 및 비즈니스 로직 확장 예정

테스트 기준 및 도구
테스트 프레임워크: 
FastAPI 내장 사용
DB는 테스트 시 사용
테스트 파일은 디렉토리에 위치
테스트는 로 실행 가능해야 함

키워드 추출 방식 ✅ 완성됨
기본 지원 추출기: , , , 
모든 추출기는 인터페이스를 구현해야 하며, 결과에 사용된 추출기의 이름을 명시해야 함
LLM 추출기의 경우, OpenAI 또는 Ollama 등 다양한 LLM 서버와의 연동을 지원
프론트엔드에서 추출기 선택 가능: 사용자는 한 가지 이상을 선택하여 키워드 추출 요청 가능
추출 방식의 기본값은 테이블의 에서 설정
선택하는 부분은 가용 목록 중에서 선택하는 방식으로 설정
KeyBERT 모델 지원 (완성됨):
14개의 sentence-transformer 모델 지원
다국어 모델 5개: all-MiniLM-L6-v2 (추천), paraphrase-multilingual-MiniLM-L12-v2, paraphrase-multilingual-mpnet-base-v2, distiluse-base-multilingual-cased, LaBSE
한국어 최적화 모델 4개: jhgan/ko-sroberta-multitask (추천), jhgan/ko-sbert-nli, BM-K/KoSimCSE-roberta-multitask, snunlp/KR-SBERT-V40K-klueNLI-augSTS
영어 전용 모델 5개: all-mpnet-base-v2, all-distilroberta-v1, all-roberta-large-v1, paraphrase-albert-small-v2, msmarco-distilbert-base-v4
설정에서 드롭다운으로 선택 가능
진행률 추적 개선 (완성됨):
파일 수 × 추출기 수로 정확한 진행률 계산
실시간 추출 로그 표시
KeyBERT 모델 다운로드 관리 (신규 완성됨):
자동 모델 다운로드 및 캐시 관리
실시간 다운로드 진행률 표시 (Server-Sent Events)
모델 상태 확인, 캐시 삭제, 재로드 기능
14개 모델별 상세 정보 및 크기 표시
상세한 추출 로깅 (신규 완성됨):
모든 KeyBERT 추출 단계 로깅 (모델 로드, 설정, 원시 결과, 위치 분석)
추출기별 키워드 결과와 점수 로깅
서버 로그와 프론트엔드 진행률 동기화

설정 관리 개발 기준 ✅ 완성됨
설정 저장: SQLite 내 테이블
프론트엔드에서 읽고 수정 가능한 API 제공:
: 전체 설정 목록 조회
: 설정 키 단건 조회
: 설정 키의 값 갱신
주요 설정 키 (완성됨):
LLM 설정:
: Ollama 서버의 base URL
: 사용 모델명 (동적 로딩으로 드롭다운 선택)
: Ollama 요청 타임아웃
: LLM 추출 기능 활성화 여부
KeyBERT 설정:
: KeyBERT 모델 선택 (14개 모델 중 드롭다운 선택)
: MMR (Maximal Marginal Relevance) 사용 여부
: Max Sum Similarity 사용 여부
: MMR 다양성 파라미터 (0.0-1.0)
: N-gram 범위 [최소, 최대]
: 불용어 언어 설정
: 최대 키워드 개수
기타 설정:
: 기본 추출기 배열
: 허용 파일 확장자
설정 관리 UI (완성됨):
탭 기반 추출기별 설정 관리 (KeyBERT, NER, LLM, KoNLPy)
모든 설정을 웹에서 관리 가능
Ollama 모델은 서버에서 동적으로 목록을 가져와 드롭다운으로 선택
연결 테스트 기능 포함
실시간 상태 피드백
저장 버튼 방식의 설정 관리 (자동 저장 대신 명시적 저장)
변경사항 표시 및 취소 기능
색상 코딩된 탭과 설정 개수 표시
KeyBERT 모델 관리 UI (신규 완성됨):
실시간 다운로드 진행률 바 표시
모델 상태 확인 (다운로드됨/필요함)
캐시 삭제 및 재로드 버튼
모델 크기 정보 표시
EventSource를 통한 실시간 진행률 업데이트

프론트엔드 요구사항 수정됨 2025.08.05 
목적: 완전한 문서 키워드 추출 관리 시스템
기술 스택: React + TypeScript + Tailwind + Axios
완성된 사용 흐름:
✅ 프로젝트 생성, 수정, 삭제
✅ 다중 파일 업로드 (drag & drop 지원)
✅ 파일별 파싱 상태 확인 및 관리
✅ 다중 추출기 선택 및 키워드 추출
✅ 실시간 추출 결과 표시
✅ 고급 키워드 관리 (키워드 중심/문서 중심 뷰)
✅ 시스템 설정 관리 (동적 모델 선택 포함)
문서에 대한 뷰어 기능
완성된 컴포넌트:
: 메인 애플리케이션 라우팅 및 상태 관리
: 프로젝트 생성 및 관리
: 파일 업로드 (단일/다중 지원)
: 추출기 선택 및 실행
: 추출 결과 표시
: 시스템 설정 관리 (탭 기반 UI, 드롭다운 모델 선택)
: 키워드 관리 UI (키워드/문서 중심 뷰)
고급 기능 (완성됨):
키워드 중심 뷰: 키워드별로 발견된 문서와 위치 정보 표시
문서 중심 뷰: 문서별로 추출된 키워드 목록 표시
추출기별 필터링 및 색상 구분
실시간 검색 및 필터링
추출기 정보 및 점수 표시

배포 가이드 (완성됨)

실행 스크립트
: 백엔드 실행 (Conda 환경, 포트 8000)
: 프론트엔드 실행 (포트 3001)
: 백엔드와 프론트엔드 동시 실행

실행 방법

환경 요구사항
Conda (기본 환경명: DocExtract)
Node.js (React 개발 서버용)
Python 3.11+ (Conda 환경 내)
Ollama 서버 (LLM 기능 사용 시)

KeyBERT 모델 다운로드 및 진행률 관리 ✅ 신규 완성됨

기능 개요
자동 모델 다운로드: 설정에서 모델 변경 시 필요한 경우 자동 다운로드
실시간 진행률 표시: Server-Sent Events (SSE)를 통한 실시간 다운로드 진행률
캐시 관리: 모델 상태 확인, 캐시 삭제, 재로드 기능
호환성 확보: huggingfacehub 5.0.0과 sentence-transformers 5.0.0 호환

백엔드 구현
Progress Tracking: 전역 딕셔너리로 실시간 상태 관리
SSE 스트리밍: 엔드포인트
캐시 감지: 새로운 huggingface hub 캐시 위치 () 지원
상세 로깅: 모든 다운로드 단계별 서버 로그 기록

프론트엔드 구현
Progress Bar: Tailwind CSS 기반 애니메이션 진행률 바
EventSource: 실시간 진행률 수신 및 상태 업데이트
모델 관리 UI: 상태 확인, 캐시 삭제, 재로드 버튼
사용자 피드백: 다운로드 완료 시 크기 정보 및 소요 시간 표시

진행률 단계
0% - 시작: "다운로드 준비 중..."
10% - 캐시 확인: "캐시 상태 확인 중..."
20% - 다운로드: "모델 다운로드 중... (시간이 걸릴 수 있습니다)"
50% - 초기화: "모델 초기화 중..."
80% - 검증: "모델 검증 중..."
90% - 크기 계산: "캐시 크기 계산 중..."
100% - 완료: "완료! (소요시간: X초, 크기: XMB)"

KeyBERT 추출 로깅 시스템 ✅ 신규 완성됨

로깅 범위
모델 로드: 모델 변경 감지, 로드 시작/완료, 실패 처리
추출 설정: 알고리즘(MMR/MaxSum/CosineSim), 매개변수, 다양성 설정
원시 결과: KeyBERT가 반환한 키워드와 점수 목록
위치 분석: 텍스트에서 찾은 키워드 위치와 컨텍스트
통계 정보: 총 키워드 수, 위치 있는 키워드와 추상 키워드 분류

로깅 예시

고급 디버그 로깅 시스템 🐛 신규 완성됨 (2025.08.07)

시스템 개요
키워드 추출 과정의 모든 중간 결과물을 상세히 기록하고 분석할 수 있는 포괄적인 디버깅 시스템입니다.

주요 기능
🔄 단계별 추적: 추출 시작 → 전처리 → 후보생성 → 임베딩 → 유사도계산 → 알고리즘적용 → 위치분석 → 최종결과
📁 자동 파일 저장: 모든 중간 결과물을 JSON/텍스트 파일로 자동 저장
📊 HTML 리포트: 시각적 요약 리포트 자동 생성
🎯 추출기별 지원: KeyBERT, spaCy NER, LLM(Ollama), KoNLPy 모든 추출기 완전 지원
⚙️ 환경변수 제어: 로 간편 활성화

수집되는 디버그 정보
추출 시작 ()
파일 정보 (이름, 크기, ID)
텍스트 통계 (길이, 단어수, 문장수, 다양성)
추출기 설정 및 매개변수
전처리 ()
원본 텍스트 vs 정제된 텍스트 비교
전처리 단계 기록 (, 등)
텍스트 변화율 및 통계
후보 생성 ()
키워드 후보 목록 (상위 50개)
생성 방법 (, , 등)
후보 통계 (총 개수, 고유 개수, 평균 길이, 단일어/복합어 비율)
임베딩 계산 ()
사용된 모델 정보
문서 임베딩 및 후보 임베딩 차원
임베딩 통계 (평균, 표준편차, 노름)
유사도 계산 ()
코사인 유사도 또는 빈도 기반 점수 배열
유사도 분포 통계 (최소/최대/평균/중앙값)
상위/하위 결과 (Top 10, Bottom 5)
알고리즘 적용 ()
사용된 알고리즘 (MMR, Max Sum, Frequency-based)
알고리즘 매개변수 (diversity, nrcandidates 등)
입력 후보 vs 최종 선택된 키워드
제외된 키워드 목록 및 사유
위치 분석 ()
각 키워드의 텍스트 내 위치 정보
페이지/줄/컬럼 번호 매핑
키워드 주변 컨텍스트
위치 커버리지 통계
최종 결과 ()
추출된 최종 키워드 목록 (점수, 카테고리, 위치)
처리 성능 통계 (추출 시간, 초당 키워드 수)
평균 점수 및 분포

저장되는 파일 구조

활용 방법

디버그 모드 활성화

HTML 리포트 확인

개별 파일 분석
: 전체 세션의 모든 단계별 데이터
: 각 추출기별 키워드 후보 분석
: 유사도/점수 계산 상세 결과
: 키워드 위치 및 컨텍스트 정보

성능 영향
디버그 모드 비활성화 시: 성능 영향 없음 (모든 로깅 건너뜀)
디버그 모드 활성화 시: 약 10-20% 추가 처리 시간 (파일 I/O 포함)

보안 및 개인정보
디버그 파일은 로컬에만 저장됨 (외부 전송 없음)
텍스트 내용이 포함되므로 민감한 문서 처리 시 주의
필요 시 디버그 파일 자동 삭제 기능 구현 가능

Dublin Core 메타데이터 시스템 🎯 신규 완성됨 (2025.08.28)

기능 개요
국제 표준 준수: Dublin Core 메타데이터 표준을 완전히 구현한 문서 메타데이터 시스템
스키마 기반 구조: metadata-schema.md에 정의된 엄격한 스키마 준수
자동 메타데이터 추출: 파일 업로드 시 Dublin Core 표준에 따른 메타데이터 자동 생성
다중 네임스페이스 지원: dc:, dcterms:, doc:, processing:, file: 네임스페이스 완전 지원

주요 특징
필수 필드 보장: Dublin Core 필수 7개 필드 자동 생성 (dc:title, dc:identifier, dc:creator, dc:type, dc:format, dc:language, dcterms:created)
스마트 폴백 시스템: 메타데이터 누락 시 적절한 기본값 자동 제공
타입 정규화: 문자열→배열, 타임스탬프→ISO 8601 등 자동 변환
언어 감지: 문서 내용 분석을 통한 자동 언어 코드 설정
고유 식별자 생성: 파일 ID + UUID 조합으로 전역 고유 식별자 생성

API 엔드포인트
- 직접 파일 메타데이터 접근
- 프로젝트 스코프 메타데이터 접근

응답 예시

기술 구현
DocumentMetadata.toschemacompliantdict(): 스키마 준수 변환 메서드
자동 MIME 타입 감지: 파일 확장자 기반 MIME 타입 자동 매핑
Dublin Core 타입 매핑: 파일 형식을 표준 Dublin Core 타입으로 변환
Null 값 필터링: 응답에서 null 값 자동 제외로 깨끗한 JSON 출력

탭 기반 설정 관리 시스템 ✅ 신규 완성됨 (2025.08.04)

기능 개요
추출기별 설정 분리: 각 추출기(KeyBERT, NER, LLM, KoNLPy)별로 독립적인 탭 제공
색상 코딩: 탭별 고유 색상으로 시각적 구분 (KeyBERT: 파란색, NER: 초록색, LLM: 보라색, KoNLPy: 주황색)
설정 개수 표시: 각 탭에 해당하는 설정 항목 개수를 뱃지로 표시
활성화 상태 표시: 각 추출기의 활성화/비활성화 상태를 탭 내용에서 확인 가능

UI 구성 요소
탭 헤더: 
클릭 가능한 탭 버튼 (KeyBERT, NER, LLM, KoNLPy)
활성 탭은 색상 강조 및 하단 테두리 표시
설정 개수 뱃지 (예: "KeyBERT 5", "LLM 8")
탭 내용:
선택된 탭에 해당하는 설정만 표시
추출기 활성화 상태 표시 (활성화됨/비활성화됨)
색상 인디케이터로 추출기 구분
기존 기능 유지:
기본 추출기 설정, Ollama 설정, 파일 설정, 앱 설정은 별도 섹션으로 유지
모든 기존 기능(드롭다운, 연결 테스트, 진행률 표시 등) 완전 호환

기술 구현
동적 CSS 클래스: 함수 기반 스타일 헬퍼로 Tailwind CSS 호환성 확보
상태 관리: 상태로 현재 선택된 탭 추적
조건부 렌더링: 선택된 탭에 따라 해당 설정만 표시

지원 파일 포맷 
, , , , 포맷 지원
업로드 시 포맷에 따라 자동 파서 선택
내부적으로 모든 문서를 plain text로 변환 후 키워드 추출기()에 전달
파서는 모듈 내 정의
허용 확장자 설정은 테이블의 항목으로 관리

Docling 고급 파서 시스템 🔍 신규 완성됨 (2025.08.29)

개요
Docling은 IBM에서 개발한 고급 문서 파싱 라이브러리로, PDF 파일의 복잡한 구조를 정확하게 추출할 수 있습니다.

주요 기능
테이블 구조 추출: PDF 내 테이블을 Markdown 형식으로 정확하게 변환
섹션 계층 분석: 헤딩 레벨과 문서 구조 자동 인식
이미지 캡션 추출: 이미지와 관련된 캡션 텍스트 추출
레이아웃 보존: 원본 문서의 레이아웃 정보 유지

사용법

구현 특징
선택적 활성화: 파라미터로 선택적 사용
폴백 시스템: Docling 실패 시 기본 PDF 파서로 자동 전환
성능 고려: 큰 파일의 경우 처리 시간이 길어질 수 있음
호환성 문제: Pydantic 버전 충돌 시 자동으로 기본 파서 사용

알려진 문제
Pydantic SerializationInfo 오류: 라이브러리 버전 간 호환성 문제
해결 방법: 자동 폴백 메커니즘으로 기본 PDF 파서 사용
권장 사항: 중요한 문서 분석 시 명시적 설정

지식 그래프 구축 시스템 🧠 신규 완성됨 (2025.08.29)

개요
추출된 키워드 간의 관계를 분석하여 지식 그래프를 구축하고 시각화하는 기능입니다.

주요 기능
키워드 관계 분석: 동시 출현 빈도 기반 관계 추출
그래프 구축: 노드(키워드)와 엣지(관계) 생성
다양한 내보내기 형식: JSON, GraphML, DOT 형식 지원
통계 정보: 그래프 메트릭 및 중심성 분석

API 엔드포인트
- 지식 그래프 구축
- 그래프 데이터 내보내기
- 그래프 통계 정보

구현 위치
라우터: 
서비스: 

로컬 분석 API 시스템 📊 신규 완성됨 (2025.08.29)

개요
프로젝트 생성 없이 로컬 파일 시스템의 문서를 직접 분석할 수 있는 독립적인 API 시스템입니다.

주요 기능
프로젝트 독립적: 별도 프로젝트 생성 없이 바로 분석
디렉토리 탐색: 작업 디렉토리 변경 및 파일 탐색
실시간 분석: 즉시 키워드 추출 결과 제공
메타데이터 전용 추출: 키워드 추출 없이 메타데이터만 빠르게 확인
다중 추출기 지원: 여러 키워드 추출기 동시 사용
🆕 디렉토리 파라미터: 모든 결과 파일을 사용자 지정 디렉토리에 생성 (2025.08.31)
🆕 파일 경로 추적: savedfiles 응답으로 생성된 모든 파일 경로 제공
🆕 마크다운 파일 관리: docling.md, pymupdf4llm.md를 지정된 위치에 정확히 생성

핵심 API

구현 위치
라우터: 
서비스: 
사용법 가이드: 

특징
상대 경로 기반: 현재 작업 디렉토리 기준으로 모든 파일 경로 해석
결과 파일 저장: 분석 결과를 파일로 자동 저장
Dublin Core 메타데이터: 국제 표준 메타데이터 함께 제공

🔥 Memgraph Knowledge Graph 시스템 ✅ 완성됨 (2025.08.30)

시스템 개요
DocExtract는 이제 전문 그래프 데이터베이스인 Memgraph를 사용하여 문서에서 추출한 지식을 의미있는 그래프 구조로 저장하고 관리합니다.

주요 특징
🎯 도메인 자동 감지: 기술, 학술, 비즈니스, 법률, 일반 문서 자동 분류
📊 도메인별 특화 엔티티: 각 문서 타입에 최적화된 엔티티 타입 생성
🔗 구체적 관계 추론: → , , 등 의미있는 관계
🚀 자동 저장: KG 생성과 동시에 Memgraph DB에 자동 저장
🔍 강력한 검색: Cypher 쿼리를 통한 복잡한 그래프 검색
📈 시각화 지원: Memgraph Studio 및 웹 API를 통한 그래프 시각화

도메인별 엔티티 및 관계

기술 문서
엔티티: , , , , , , , 
관계: , , , , , , 

학술 논문
엔티티: , , , , , , 
관계: , , , , , , 

비즈니스 문서
엔티티: , , , , , , 
관계: , , , , , 

사용 예시

KG 생성 및 자동 저장

그래프 데이터 조회

Cypher 쿼리 실행

Memgraph Studio 시각화
웹 인터페이스: http://localhost:3000
그래프 시각화: 노드/관계 색상, 크기, 라벨 커스터마이징
대화형 탐색: 클릭 확장, 필터링, 줌인/줌아웃

설치 및 설정
자세한 설치 가이드는 파일을 참고하세요.

통합 워크플로우
문서 업로드 → 파싱
키워드 추출 → 도메인 감지
구조 분석 → 엔티티/관계 추출
KG 생성 → Memgraph 자동 저장
시각화/분석 → Studio 또는 API 조회